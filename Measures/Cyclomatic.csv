Kind,Name,MaxCyclomatic,Cyclomatic,AvgCyclomatic
Private Constructor,"backend.helper.CustomMath.CustomMath()",,1,
Public Method,"backend.helper.CustomMath.absoluteValue(double)",,1,
Public Method,"backend.helper.CustomMath.absoluteValue(int)",,1,
Public Static Method,"backend.helper.CustomMath.getInstance()",,1,
Public Method,"backend.helper.CustomMath.maximum(double,double)",,1,
Public Method,"backend.helper.CustomMath.maximum(int,int)",,1,
Public Method,"backend.helper.CustomMath.oneIfGreaterThanElseZero(double,double)",,1,
Public Method,"backend.helper.CustomMath.signBit(double)",,1,
Public Method,"backend.helper.CustomMath.squareRoot(double)",,1,
Public Method,"backend.helper.CustomMath.squareRoot(double,double)",,2,
Public Method,"backend.model.ComputeEmpty.update(Event)",,1,
Public Method,"backend.model.ComputeMaximum.update(Event)",,1,
Public Method,"backend.model.ComputeMean.update(Event)",,1,
Public Method,"backend.model.ComputeMeanAbsoluteDeviation.update(Event)",,2,
Public Method,"backend.model.ComputeMedian.update(Event)",,1,
Public Method,"backend.model.ComputeMinimum.update(Event)",,1,
Private Method,"backend.model.ComputeMode.findMode(List<Double>)",,4,
Public Method,"backend.model.ComputeMode.update(Event)",,1,
Public Constructor,"backend.model.ComputeObserver.ComputeObserver()",,1,
Public Method,"backend.model.ComputeObserver.addObserver(ComputeObserver)",,1,
Public Method,"backend.model.ComputeObserver.getOutputList()",,1,
Public Method,"backend.model.ComputeObserver.getOutputValue()",,1,
Public Abstract Method,"backend.model.ComputeObserver.update(Event)",,0,
Public Method,"backend.model.ComputeObserver.updateObservers(Event)",,2,
Public Method,"backend.model.ComputeStandardDeviation.update(Event)",,3,
Private Constructor,"backend.model.Event.Event(EventBuilder)",,1,
Public Constructor,"backend.model.Event.EventBuilder.EventBuilder()",,1,
Public Constructor,"backend.model.Event.EventBuilder.EventBuilder(Event)",,1,
Public Method,"backend.model.Event.EventBuilder.addInput(double)",,1,
Public Method,"backend.model.Event.EventBuilder.build()",,1,
Public Method,"backend.model.Event.EventBuilder.setInputs(List<Double>)",,1,
Public Method,"backend.model.Event.EventBuilder.setMean(double)",,1,
Public Method,"backend.model.Event.getInputs()",,1,
Public Method,"backend.model.Event.getMean()",,1,
Public Static Method,"frontend.Utils.StringCheckingUtils.stringContainsItemFromList(String,String[])",,1,
Public Static Method,"frontend.calculator.ui.App.main(String[])",,1,
Private Method,"frontend.calculator.ui.Controller.addToDisplay(String)",,1,
Public Method,"frontend.calculator.ui.Controller.initialize()",,1,
Public Method,"frontend.calculator.ui.Controller.onClearClick(MouseEvent)",,1,
Public Method,"frontend.calculator.ui.Controller.onDeleteClick(MouseEvent)",,1,
Public Method,"frontend.calculator.ui.Controller.onDotClick(MouseEvent)",,1,
Public Method,"frontend.calculator.ui.Controller.onFunctionClick(MouseEvent)",,8,
Public Method,"frontend.calculator.ui.Controller.onMouseClick(MouseEvent)",,2,
Public Method,"frontend.calculator.ui.Controller.onNextClick(MouseEvent)",,1,
Private Method,"frontend.calculator.ui.Controller.updateInput()",,4,
Public Static Method,"frontend.calculator.ui.MetricsticsUI.main(String[])",,1,
Public Method,"frontend.calculator.ui.MetricsticsUI.start(Stage)",,1,